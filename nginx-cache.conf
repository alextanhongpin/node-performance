worker_processes 4;

events { worker_connections 7168; }

http {

        upstream node-app {
            least_conn;
            server docker.for.mac.localhost:3000 weight=10 max_fails=3 fail_timeout=30s;
        }

        # Set cache directory
        proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=api_name:10m inactive=10m max_size=1g;

        # Set cache key to include identifying components
        proxy_cache_key $scheme$proxy_host$request_uri;

        # Add cache status to log
        log_format cache '$remote_addr - $remote_user [$time_local] "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent" cs=$upstream_cache_status';
         
        server {
              listen 80;

              location / {
                proxy_pass http://node-app;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection 'upgrade';
                proxy_set_header Host $host;
                proxy_cache_bypass $http_upgrade;

                # Add cache to header
                add_header X-Cache-Status $upstream_cache_status;

                # The name of your cache, linked to keys_zone in `proxy_cache_path` above
                proxy_cache api_name;

                # Allow only one request to go upstream at any time
                proxy_cache_lock on;

                # Instead of waiting upstream, give clients the cache
                proxy_cache_use_stale updating;

                # Cache only requests with status code 200, for 10 minutes
                proxy_cache_valid 200 10m;

                # Cache post methods
                proxy_cache_methods POST;

                proxy_ignore_headers X-Accel-Expires Expires Cache-Control;
              }
        }
}